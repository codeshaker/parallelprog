#MP 2

#include <wb.h>
#define TD 16

void ferror(cudaError_t err)
{
	printf("%s in %s at line %d\n",cudaGetErrorString(err),__FILE__,__LINE__);
		exit(EXIT_FAILURE);
}

// Compute C = A * B

__global__ void matrixMultiply(float *A, float *B, float *C, int numARows,
                               int numAColumns, int numBRows, int numBColumns,
                               int numCRows, int numCColumns) 
{
    //@@ Insert code to implement matrix multiplication here
	
	int row = blockIdx.y*blockDim.y + threadIdx.y;
	int col = blockIdx.x*blockDim.x + threadIdx.x;
	int n=numAColumns;
	
	if(row<numCRows && col<numCColumns)
	{
		float val=0.0;
		for(int i=0;i<n;i++)
			val += A[row*n+i]*B[col+i*numCColumns];
		
		C[row*numCColumns+col]=val;
	}
	
	
}

int main(int argc, char **argv) 
{
  wbArg_t args;
	int sizeA,sizeB,sizeC;
  float *hostA; // The A matrix
  float *hostB; // The B matrix
  float *hostC; // The output C matrix
  float *deviceA;
  float *deviceB;
  float *deviceC;
  int numARows;    // number of rows in the matrix A
  int numAColumns; // number of columns in the matrix A
  int numBRows;    // number of rows in the matrix B
  int numBColumns; // number of columns in the matrix B
  int numCRows;    // number of rows in the matrix C (you have to set this)
  int numCColumns; // number of columns in the matrix C (you have to set this)

  args = wbArg_read(argc, argv);

  wbTime_start(Generic, "Importing data and creating memory on host");
  hostA = ( float * )wbImport(wbArg_getInputFile(args, 0), &numARows, &numAColumns);
  hostB = ( float * )wbImport(wbArg_getInputFile(args, 1), &numBRows, &numBColumns);
  //@@ Set numCRows and numCColumns
  
  numCRows = numARows;
  numCColumns = numBColumns;
	
	sizeA=numARows*numAColumns*sizeof(float);
	sizeB=numBRows*numBColumns*sizeof(float);
	sizeC=numCRows*numCColumns*sizeof(float);
 
	//@@ Allocate the hostC matrix
	
	hostC=(float*)malloc(sizeC);
	
  wbTime_stop(Generic, "Importing data and creating memory on host");

  wbLog(TRACE, "The dimensions of A are ", numARows, " x ", numAColumns);
  wbLog(TRACE, "The dimensions of B are ", numBRows, " x ", numBColumns);

  wbTime_start(GPU, "Allocating GPU memory.");
  
	//@@ Allocate GPU memory here
	cudaError_t err1,err2,err3;
	
	err1 = cudaMalloc((void**)&deviceA,sizeA);
	err2 = cudaMalloc((void**)&deviceB,sizeB);
	err3 = cudaMalloc((void**)&deviceC,sizeC);
	
	if(err1!= cudaSuccess)
	ferror(err1);
	
	if(err2!= cudaSuccess)
	ferror(err2);
	
	if(err3!= cudaSuccess)
	ferror(err3);
	
	

  wbTime_stop(GPU, "Allocating GPU memory.");

  wbTime_start(GPU, "Copying input memory to the GPU.");
  	
	//@@ Copy memory to the GPU here
			
	cudaMemcpy(deviceA,hostA,sizeA,cudaMemcpyHostToDevice);
	cudaMemcpy(deviceB,hostB,sizeB,cudaMemcpyHostToDevice);
	
  wbTime_stop(GPU, "Copying input memory to the GPU.");

  //@@ Initialize the grid and block dimensions here
			
	dim3 Dgrid((numCColumns-1)/TD+1,(numCRows-1)/TD+1,1);
	dim3 Dblock(TD,TD,1);		

  wbTime_start(Compute, "Performing CUDA computation");
  //@@ Launch the GPU Kernel here
	
	matrixMultiply<<<Dgrid,Dblock>>>(deviceA,deviceB,deviceC,numARows,numAColumns,numBRows,numBColumns,numCRows,numCColumns);
	
  cudaDeviceSynchronize();
			
  wbTime_stop(Compute, "Performing CUDA computation");

  wbTime_start(Copy, "Copying output memory to the CPU");
  //@@ Copy the GPU memory back to the CPU here
			
	cudaMemcpy(hostC,deviceC,sizeC,cudaMemcpyDeviceToHost);		

  wbTime_stop(Copy, "Copying output memory to the CPU");

  wbTime_start(GPU, "Freeing GPU Memory");
 
			//@@ Free the GPU memory here
		
		cudaFree(deviceA);
		cudaFree(deviceB);
		cudaFree(deviceC);	

  wbTime_stop(GPU, "Freeing GPU Memory");

  wbSolution(args, hostC, numCRows, numCColumns);

  free(hostA);
  free(hostB);
  free(hostC);

  return 0;
}